classdef LaplaceMethod
    %使用改进的拉普拉斯方法确定轨道
    
    properties
        r0; %航天器在地心惯性系下的初始位置
        v0; %航天器在地心惯性系下的初始速度
    end
    
    methods
        function obj = LaplaceMethod(stationpos,spacecraftdir,s)
            %构造函数
            %输入为测站位置、航天器方向和当地真恒星时
            import constants.AstroConstants
            error = 1000;
            len = length(stationpos);
            %初始化拉格朗日系数
            F = ones(len,1);
            for i = 1:len
                G(i) = s(i)-s(1);
            end
            tmp = cross(spacecraftdir,stationpos);
            for i = 1:len
                b(3*i-2)=-tmp(i,3);
                b(3*i-1)=-tmp(i,1);
                b(3*i)=-tmp(i,2);
            end
            b = b';
            lambda = spacecraftdir(:,1);
            yita = spacecraftdir(:,2);
            niu = spacecraftdir(:,3);
            solution_ = zeros(6,1);
         while(error>1) 
                for i = 1:len
                    A(3*i-2,:) = [F(i)*yita(i),-F(i)*lambda(i),0,G(i)*yita(i),-G(i)*lambda(i),0];
                    A(3*i-1,:) = [0,F(i)*niu(i),-F(i)*yita(i),0,G(i)*niu(i),-G(i)*yita(i)];
                    A(3*i,:) = [-F(i)*niu(i),0,F(i)*lambda(i),-G(i)*niu(i),0,G(i)*lambda(i)];  
                end
%                 A
%                 b
                solution = lsqminnorm(A,b,'warn');
                error = norm(solution-solution_);
                solution_ = solution;
                r0 = solution(1:3);
                v0 = solution(4:6);
                tmp = orbitDefine.usingSinglePosVel(r0,v0,s(i));
                tmp.a;
                tmp.E0;
                for i = 1:len
                    fun = @(E)(sqrt(AstroConstants.GM/tmp.a^3)*(s(i)-s(1))-E+tmp.e*sin(E));
                    options = optimoptions('fsolve','none');
                    E = fsolve(fun,0,options); %求解开普勒方程
                    E
                    E0 = tmp.E0/180*pi;
                    F(i) = 1 - tmp.a/norm(r0)*(1-cos(E-E0));
                    sigma0 = dot(r0,v0)/sqrt(AstroConstants.GM); 
                    G(i) = tmp.a*sigma0/sqrt(AstroConstants.GM)*(1-cos(E-E0))+norm(r0)*sqrt(tmp.a/sqrt(AstroConstants.GM))*sin(E-E0);
                end
                    
         end
         obj.r0 = r0;
         obj.v0 = v0;
        end
        
    end
end

